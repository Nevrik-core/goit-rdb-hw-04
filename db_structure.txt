-- a)
CREATE DATABASE LibraryManagement;

USE LibraryManagement;

-- b) Таблиця "authors":
CREATE TABLE authors (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    author_name VARCHAR(255) NOT NULL
);

-- c) Таблиця "genres":
CREATE TABLE genres (
    genre_id INT AUTO_INCREMENT PRIMARY KEY,
    genre_name VARCHAR(255) NOT NULL
);

-- d) Таблиця "books":
CREATE TABLE books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    publication_year YEAR NOT NULL,
    author_id INT,
    genre_id INT,
    FOREIGN KEY (author_id) REFERENCES authors(author_id),
    FOREIGN KEY (genre_id) REFERENCES genres(genre_id)
);

-- e) Таблиця "users":
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL
);

-- f) Таблиця "borrowed_books":
CREATE TABLE borrowed_books (
    borrow_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT,
    user_id INT,
    borrow_date DATE NOT NULL,
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES books(book_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);




-- Заповнюємо таблицю authors
INSERT INTO authors (author_name) VALUES ('Roger Zelazny'), ('Stephen King');

-- Заповнюємо таблицю genres
INSERT INTO genres (genre_name) VALUES ('Fantasy'), ('Horror');

-- Заповнюємо таблицю books
INSERT INTO books (title, publication_year, author_id, genre_id) VALUES 
('Nine Princes in Amber', 1970, 1, 1),
('The Guns of Avalon', 1972, 1, 1),
('Sign of the Unicorn', 1975, 1, 1),
('11/22/63', 2011, 2, 2),
('The Shining', 1977, 2, 2);

-- Заповнюємо таблицю users
INSERT INTO users (username, email) VALUES ('john_doe', 'john@example.com'), ('jane_smith', 'jane@example.com');

-- Заповнюємо таблицю borrowed_books
INSERT INTO borrowed_books (book_id, user_id, borrow_date, return_date) VALUES 
(1, 1, '2024-01-01', '2024-01-15'),
(4, 2, '2024-01-10', NULL);

SELECT * FROM authors;
SELECT * FROM books;
SELECT * FROM borrowed_books;


-- Завдання 3. Об'єднання всіх таблиць з теми 3
SELECT *
FROM order_details
JOIN orders ON order_details.order_id = orders.order_id
JOIN customers ON orders.customer_id = customers.customer_id
JOIN products ON order_details.product_id = products.product_id
JOIN categories ON products.category_id = categories.category_id
JOIN employees ON orders.employee_id = employees.employee_id
JOIN shippers ON orders.ship_via = shippers.shipper_id
JOIN suppliers ON products.supplier_id = suppliers.supplier_id;



-- Завдання 4. 

-- Визначити кількість рядків через COUNT
SELECT COUNT(*) AS row_count
FROM order_details
JOIN orders ON order_details.order_id = orders.order_id
JOIN customers ON orders.customer_id = customers.customer_id
JOIN products ON order_details.product_id = products.product_id
JOIN categories ON products.category_id = categories.category_id
JOIN employees ON orders.employee_id = employees.employee_id
JOIN shippers ON orders.ship_via = shippers.shipper_id
JOIN suppliers ON products.supplier_id = suppliers.supplier_id;

-- Заміна JOIN на LEFT або RIGHT + пояснення
SELECT COUNT(*) AS row_count
FROM order_details
LEFT JOIN orders ON order_details.order_id = orders.order_id
LEFT JOIN customers ON orders.customer_id = customers.customer_id
LEFT JOIN products ON order_details.product_id = products.product_id
LEFT JOIN categories ON products.category_id = categories.category_id
LEFT JOIN employees ON orders.employee_id = employees.employee_id
LEFT JOIN shippers ON orders.ship_via = shippers.shipper_id
LEFT JOIN suppliers ON products.supplier_id = suppliers.supplier_id;

-- LEFT JOIN включає всі рядки з лівої таблиці навіть без відповідних у правій.
-- RIGHT JOIN — навпаки.
-- INNER JOIN повертає тільки ті, що мають відповідність в обох.
-- Тому при LEFT JOIN кількість рядків може бути більшою.



-- Фільтрація за employee_id > 3 AND employee_id <= 10
SELECT *
FROM order_details
JOIN orders ON order_details.order_id = orders.order_id
JOIN employees ON orders.employee_id = employees.employee_id
WHERE employees.employee_id > 3 AND employees.employee_id <= 10;

-- Групування за іменем категорії + кількість та середня кількість товару
SELECT 
  categories.category_name,
  COUNT(*) AS row_count,
  AVG(order_details.quantity) AS avg_quantity
FROM order_details
JOIN products ON order_details.product_id = products.product_id
JOIN categories ON products.category_id = categories.category_id
GROUP BY categories.category_name;

-- Відфільтрувати середню кількість > 21
SELECT 
  categories.category_name,
  COUNT(*) AS row_count,
  AVG(order_details.quantity) AS avg_quantity
FROM order_details
JOIN products ON order_details.product_id = products.product_id
JOIN categories ON products.category_id = categories.category_id
GROUP BY categories.category_name
HAVING avg_quantity > 21;

-- Сортування за кількістю рядків — спадання
SELECT 
  categories.category_name,
  COUNT(*) AS row_count,
  AVG(order_details.quantity) AS avg_quantity
FROM order_details
JOIN products ON order_details.product_id = products.product_id
JOIN categories ON products.category_id = categories.category_id
GROUP BY categories.category_name
HAVING avg_quantity > 21
ORDER BY row_count DESC;

-- Пропустити перший рядок, показати наступні 4
SELECT 
  categories.category_name,
  COUNT(*) AS row_count,
  AVG(order_details.quantity) AS avg_quantity
FROM order_details
JOIN products ON order_details.product_id = products.product_id
JOIN categories ON products.category_id = categories.category_id
GROUP BY categories.category_name
HAVING avg_quantity > 21
ORDER BY row_count DESC
LIMIT 4 OFFSET 1;


